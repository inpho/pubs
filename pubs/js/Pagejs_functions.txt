This File is a list of the functions found in Page.js to aid in 
commenting and better organizing the code in the future.

Page.js
-------

Page.initializePanel(void)
> Line: ~128
> Description:
  Sets up initial content for each panel in index.php

Page.swapPanels2And3(void)
> Line: ~255
> Description:
  Shows/Hides panel3_div and panel1_div
* Question: should this be named swapPanels1And3() ?

Page.oneCitationInPanel(citationInPanel, fieldFlag, newFlag)
> Line: ~270
> Description:
  Displays a single citation for a specified edit. Called 
  by editOneCitation().
> params: 
  citationInPanel - citation object to show
  fieldFlag - String ("text" or something else) 
  newFlag - String (either "new" or "merge")

Page.editOneCitation(i)
> Line: ~346
> Description:
  Calls oneCitationInPanel() to edit a citation in a
  given format
> params:
  i = int (i < 0; determines type of edit to be done)

Page.setSubmitter(user, document_root, owner, currentCollection)
> Line: ~378
> Description:
  Sets up the owner of a collection. Called by index.php
> params:
  user - login username
  document_root - current filepath
  owner - cas login name 
  currentCollection - the collection being submitted

Page.rewritePage(responseObj)
> Line: ~404
> Description:
  Updates certain page values according to an Ajax response object. Called 
  by Page.onResponse()
> params:
  responseObj - object collected from an ajax request

Page.onResponse(void)
> Line: ~419
> Description:
  Calls Page.rewritePage() if it receives an Ajax response.
* Question: What are input_method 's 1, 2, and 3?

Page.onResponseCheckAuthors(void)
> Line: ~450
> Description:
  Checks if an Ajax response returns a citation id. If so it calls
  showFeedbackAfterSave(). Otherwise, It just shows a default panel

Page.showFeedbackAfterSave(responseObj)
> Line: ~471
> Description:
  Verifies that the given citation in the responseObj was saved correctly
> Params:
  responseObj - object containing a citation

Pafe.updateCitationsArraysAndTabs_after_save(void)
> Line: ~539
> Description:
  Updates all saved arrays to include updated/new citations

Page.updateOneCitationsArray_after_save(arr)
> Line: ~556
> Description:
  Updates the saved array's citations with the current versions of the citations
  (use after a change has been made)
> Params:
  arr - given array to update citations in

Page.updateCitationsArraysAndTabs_after_delete(void)
> Line: ~568
> Description:
  Updates all saved arrays to remove a deleted citations

Page.updateOneCitationsArray_after_delete(arr)
> Line: ~595
> Description:
  Updates the given array by removing deleted citation(s)
> Params:
  arr - array to remove deleted citation(s) from

Page.updateTabView(tabView, arr)
> Line: ~607
> Description:
  Updates the citation content of a tab.
> Params:
  tabView - a tabView object
  arr - array with the citation information to display/update

Page.showCheckAuthorPanel(responseObj)
> Line: ~620
> Description:
  Display a list of unverified authors.
> Params:
  responseObj - object containing citations with unverified authors

Page.checkInputAndSave1(type, merge, timestamp, verified)
> Line: ~679
> Description:
  Saves a citation in a specified way depending on parameters and updates
  whether or not the citation has been verified.
> Params:
  type - string indicating the type of input/save (update/create)
  merge - string indicating whether or not the ids need to be merged (valid
  input is "merge") 
  timestamp - timestamp of save
  verified - verification status of the citation

Page.uncheckAllAuthorCheckboxesInPanel(void)
> Line: ~746
> Description:
  Sets all the check boxes for any author to be unchecked.

Page.createVerifiedAuthor_request(obj)
> Line: ~757
> Description:
  Loops through author checkboxes and checks if they are checked.
* NOTE: This function doesn't do anything either way though, whether the
  boxes are checked or not.
> Params:
  obj - object containing the list of html elements

Page.SendXML(callbackmethod, xmlStr)
> Line: ~776
> Description:
  Sends the xml string through an Ajax call
> Params:
  callbackmethod - method to call if Ajax call fails.
  xmlStr - String containing xml code

Page.inputMethod(input_method)
> Line: ~786
> Description:
  This function is called from index.php. It will check fro the input from the
  menu in index.php. (Everything starts here)
> Params:
  input_method - integer value saying what the user is doing.

Page.searchCitations_request(search_type)
> Line: ~886
> Description:
  Submits a search query of the given type for collections
> Params:
  search_type - 

Page.editFacultyInfoForm(response)
> Line: ~897
> Description:
  Builds a html table of faculty members and where each member has a row and
  their table row has these columns: title1, title2, title3, phone, office,
  email, link1, link1_title, education, professional experience, and research
  interests. 
> Params:
  response - response object containing the list of faculty members and their
  information

Page.saveFacultyInfo(user)
> Line: ~973
> Description:
  Sends xml via Ajax to save faculty information changed/added by the given user.
> Params:
  user - username of person saving the file.

Page.newVerifiedAuthor(i)
> Line: ~998
> Description:
  Adds an html submit button to the page when an author has been verified and
  needs to be saved.
> Params:
  i - number of new author

Page.submitNewVerifiedAuthor(void)
> Line: ~1021
> Description:
  Submits the information for a newly verified author (used after
  Page.newVerifiedAuthor())

Page.newVerifiedAuthor_response(void)
> Line: ~1035
> Description:
  Adds a new verified author to the checklist upon receiving an Ajax response.

Page.printCitationSaveButton(_citation, fieldFlag, newFlag)
> Line: ~1049
> Description:
  Prints out the edit/save button for a citation for the appropriate field type
  and whether it is a new or existing citation.
* NOTE: if fieldFlag != "text" there is a string of if-else statements that set
* a variable tempType, but after the last else, it just sets tempType to
* "check_authors". Why bother with the if-elses then?
> Params:
  _citation - citation object
  fieldFlag - what type of field the citation is being saved from/in
  newFlag - whether the citation is new or edited.

Page.printBackTD(pointer_style)
> Line: ~1100
> Description:
  Adds a 'goToBack' cell in a table row and sets it to display the previous
  citation in a list if possible.
> Params:
  pointer_style - ??? added in as an attribute in the td tag

Page.printNextTD(pointer_style)
> Line: ~1113
> Description:
  Adds a 'goToNext' cell in a table row and sets it to display the next citation
  in a list if possible.
> Params:
  pointer_style - ???

Page.checkForCitationChanges(void)
> Line: ~1125
> Description:
  does some checks, but will ALWAYS return true
* NOTE: this will return true regardless of any of the checks that are true or
* false, so I don't feel like this will really see if changes have been made. Or
* this is just a trivial function that has no purpose.

Page.goToNextCitation(void)
> Line: ~1175
> Description:
  Checks if there are any more existing new citations and sets the currently
  desplayed one as the next available one in the Page.newly_added_citations
  array.

Page.goToBackCitation(void)
> Line: ~1208
> Description:
  Checks if the current new citation being desplayed isn't the first and
  displays previous one if it exists.

Page.printCitationEditButton(_current_citation, size)
> Line: ~1241
> Description:
  Prints a button that calls Page.oneCitationInPanel() on _current_citation with
  the given font size.
> Params:
  _current_citation - a citation object
  size - font size of text for button

Page.printUploadDialog(_citation, citation_suffix)
> Line: ~1250
> Description:
  Saves an uploaded citation and adds a suffix to the file if necessary
> Params:
  _citation - citation object
  citation_suffix - suffix of the filename

Page.clearAttachedFile(citation_suffix)
> Line: ~1294
> Description:
  Clears the field of file to upload
> Params:
  citation_suffix - specific file suffix to clear

Page.printFileUplaodDiv(citation_id, citation_suffix, status)
> Line: ~1308
> Description:
  Return an HTML div containing a form to upload files.
> Params:
  citation_id - citation object that will be uploaded
  citation_suffix - file suffix (used in naming divs)
  status - status of the file???

Page.updateUploadGlobals(citation_suffix)
> Line: ~1354
> Description:
  Sets the global citation_suffix variables to the given one
> Params:
  citation_suffix - file suffix

Page.blankInputFields(_citation, returntype)
> Line: ~1362
> Description:
  
* NOTE: This function has a few TO-DOs on it and looks unfinished. Neither
* variables are not used either.
> Params:
  _citation - 
  returntype - 

print_r(theObj)
> Line: ~1379
> Description:
  Writes an unordered HTML list with the contents of theObj
> Params:
  theObj - an object containing arrays or other objects

print_r2(theObj)
> Line: ~1398
> Description:
  Returns an array of theObj's contents in text form.
> Params:
  theObj -an object containing arrays or other objects

Page.writeOptionsForListCitations(void)
> Line: ~1419
> Description:
  Returns HTML containing a table of collection and formats the view depending
  on the internet browser being used.

Page.bestViewedWith(void)
> Line: ~1475
> Description:
  Returns an HTML div containing a link to firefox's download and telling the
  user that firefox is best for this application.

Page.copyCitationsForFormat(citations)
> Line: ~1485
> Description:
  Takes a list of citations and returns a list of JSON objects of those
  citations.
> Params:
  citations - list of citation objects

Page.mapMissingFields(cit_copy, currentFormat)
> Line: ~1492
> Description:
  Checks all the fields of a citation and fills any publication types that are
  undefined with 'misc'. Otherwise, it calls fillEmptyFields to see if the
  citation has missing fields. It returns a list of the missing fields.
> Params:
  cit_copy - citation
  currentFormat - format that citation is saved/being desplayed in

Page.filEmptyFields(_citation, pubtype, format)
> Line: ~1521
> Description:
  identifies any missing fields in a citation and fills them with a placeholder.
> Params:
  _citation - citation object
  pubtype - the type of publication the citation is for 
  format - the format the citation is saved/displayed in

Page.listCitations(void)
> Line: ~1573
> Description:
  Returns HTML code displaying a list of citations in a format specified by a
  Page variable. It can also highlight missing fields in citation if a certain
  value is set.

Page.writeListCitationsRightTable(verticalOrHorizontal i, cit_copy,
pointer_style)
> Line: ~1847
> Description:
  Returns HTML code that could display similar citations and other citations in a
  collection.
> Params:
  verticalOrHorizontal - string specifying whether or not to display the list
    vertically or horizonally
  i - row number
  cit_copy - copy of citation object
  pointer_style - type of pointer to use 

Page.showSimilarCitations(row, citation_id)
> Line: ~1907
> Description:
  Displays a list of similar citations in a left panel from the selected
  citation
> Params:
  row - table row of citation to show similar ones of
  citation_id - id of citation to show similar ones of

Page.printPagingAndFormatTable(void)
> Line: ~1915
> Description:
  Returns HTML code containing a table of different formatting options for the
  user

Page.printPageViews(void)
> Line: ~2005
> Description:
  Returns HTML code displaying how many citations are on a page, which ones, and
  how many total there are.

Page.printPageViews_paging_forwards(void)
> Line: ~2083
> Description:
  Move to the next page of citations to view

Page.printPageViews_paging_backwards(void)
> Line: ~2088
> Description:
  Move to the previous page of citations to view

Page.inArray(val, arr)
> Line: ~2100
> Description:
  Checks if the given value is in the given array. Returns true if is is and
  false if it isn't
> Params:
  val - value to check for
  arr - array to check in

Page.getCitations(page, type, citation_id)
> Line: ~2114
> Description:
  Sends an Ajax request to fetch a cirtain page of citations
> Params:
  page - page to move to
  type - type of citations to fetch
  citation_id - ??? Apparently this is also a page, but it is of a citation_id 

Page.searchCitations_response(void)
> Line: ~2147
> Description:
  Rewrites the current page with what it recieved from anAjax request
**NOTE: This seems fairly generic, it might be able to be combined with other
        _response functions

Page.listCollections(void)
> Line: ~2157
> Description:
  
Page.printBackToCitationsButton(void)
> Line: ~2207
> Description:
  returns HTML with a button that will call 'backToCitations()'

Page.backToCitations(void)
> Line: ~2214
> Description:
  Resets the page to only show all citations

Page.printFormatMenu(void)
> Line: ~2228
> Description:
  Returns HTML code with a menu to select the different citation formats (apa,
  mla, bibtex)

Page.printSortOrderMenu(void)
> Line: ~2257
> Description:
  Returns HTML code with a menu to select what parameter to sort the citations
  being viewed by.

Page.sortCitations_request(void)
> Line: ~2297
> Description:
  sorts citations in the selected type on the page and starts the viewing on the
  first page

Page.highlightMissingInfoCB(void)
> Line: ~2303
> Description:
  Returns HTML code for a checkbox that highlights missing fields of citations
  when it is checked.

Page.showCitationID(void)
> Line: ~2317
> Description:
  Returns HTML code for a checkbox on whether or not to show a citation's id or
  not.

Page.setCompactView(void)
> Line: ~2330
> Description:
  Returns HTML code for a checkbox on whether to call 'Page.setCompactViewCB()'

Page.showCollections(void)
> Line: ~2344
> Description:
  Returns HTML code for a checkbox to show all collections or not. It calls the
  function 'Page.setShowCollectionsCB()'.

Page.showNotes(void)
> Line: ~2357
> Description:
  Returns HTML code for a checkbox to show notes. Clicking the checkbox will
  call 'Page.setShowNotesCB()'.

Page.showAbstracts(void)
> Line: ~2370
> Description:
  Returns HTML code for a checkbox to show the abstracts of citations. Clicking
  the checkbox will call 'Page.setShowAbstractsCB()'.

Page.showURLs(void)
> Line: ~2383
> Description:
  Returns HTML code for a checkbox to show the urls of citations. Clicking the
  checkbox will call 'Page.setShowURLsCB()'.

Page.setMissingInfoCB(void)
> Line: ~2396
> Description:
  Checks if the checkbox to highlight missing information is set and sets the
  highlight_citations_with_missing_info_flag to 1 if it is, 0 otherwise. Then is
  calls 'Page.listCitations()'.

Page.setShowCitationIdCB(void)
> Line: ~2409
> Description:
  Checks if the checkbox to show citation ids is set and sets the
  show_citation_id_flag to 1 if it is, 0 otherwise. Then it calls
  'Page.listCitations()'.

Page.setCompactViewCB(void)
> Line: ~2422
> Description:
  Checks if the checkbox to use the compact view is set and sets the
  set_compact_view_flag to 1 if it is, 0 otherwise. Then it calls
  'Page.listCitations()'.

Page.setShowCollectionsCB(void)
> Line: ~2435
> Description:
  Checks if the checkbox to show all collections is check and sets the
  show_collections_flag to 1 if it is, 0 otherwise. Then it calls
  'Page.listCitations()'.
  
Page.setShowNotesCB(void)
> Line: ~2448
> Description:
  Checks if the checkbox to show notes is set and sets the show_notes_flag to 1
  if it is, 0 otherwise. Then it calls 'Page.listCitations()'.

Page.setShowAbstractsCB(void)
> Line: ~2461
> Description:
  Checks if the checkbox to show notes is set and set the show_abstracts_flag to
  1 if it is, 0 otherwise. Then it calls 'Page.list Citations()'.

Page.highlightMissingInfoCB(void)
> Line: ~2476
> Description:
  Returns HTML code for a checkbox that will highlight the missing fields of
  citations that are displayed.

Page.setShowURLsCB(void)
> Line: ~2494
> Description:
  Checks if the checkbox to show URLs is set and set the show_URLs_flag to 1 if
  it is, 0 otherwise. Then it calls 'Page.listCitations()'.

Page.printExportMenu(void)
> Line: ~2507
> Description:
  Returns HTML code that contains an option menu of different formats (apa, mla,
  bibtex, endnote, and apa as html list) to export a citation in. Also, whenever 
  a different option is selected it calls 'Page.exportCitations()'.

Page.printSelectCitationsOrCollectionsMenu(citationsOrCollections)
> Line: ~2550
> Description:
  Returns HTML code that sets either an option to show all of the citations or
  collections, whichever was specified, or none of them
> Params:
  citationsOrCollections - input to be passed to 'Page.updateCheckboxes()'. 

Page.exportCitations(void)
> Line: ~2576
> Description:
  Checks the currentExportFormat of the page and calls the appropriate function
  to print the citation in the correct format in HTML and return it.

Page.updateCheckboxes(citationsOrCollections)
> Line: ~2617
> Description:
  Checks all the checkboxes for either citations or collections depending on the
  input.
> Params:
  citationsOrCollections - can either being 'citations' or 'collections' and
  specifies which group should have there checkboxes updated.

Page.deleteCitation_request(citation_id)
> Line: ~2650
> Description:
  Sets the HTML on the page to a div asking the user whether or not they want to
  delete the citation with the given id from the current collection
> Params:
  citation_id - the id of a citation in the database

Page.deleteCitationHelper_request(citation_id)
> Line: ~2673
> Description:
  Sends a JSON string through Ajax to delete citation with the given id in the
  current type of publication group
> Params:
  citations_id - id of citation to delete

Page.deleteCitation_response(void)
> Line: ~2705
> Description:
  When an Ajax request is received it prints whether or not the citation was
  deleted.

Page.setCitationHighlight(row)
> Line: ~2734
> Description:
  sets the background color of the specified row to #C0C0C0.
* NOTE: this function may no longer be in use  
> Params:
  row - row to highlight

Page.updateCitationInList(_citation)
> Line: ~2739
> Description:
  Checks if the given citation is verified and makes the citation red if it
  isn't. 
> Params: 
  _citation - a citation object

Page.alertInputEntry(err_elements, element_array, data_key, data_value)
> Line: ~2758
> Description:
  Does an alerm message with a list of the fields that have errors
* NOTE: only uses err_elements input
> Params:
  err_elements - array of elements with errors
  element_array - ???
  data_key - ???
  data_value - ???

Page.validateInputEntry(element_array, data_key, data_value
> Line: ~2769
> Description:
  Returns a list of fields that contain errors
> Params:
  element_array - array of elements
  data_key - array of keys to each elements
  data_value - the value key to be put into the data_key array
* NOTE: The three inputs for this function seem like they could be implemented
* in a much better way with a dictionary or something like that.

Page.clearInputEntry(void)
> Line: ~2823
> Description:
  Clears all the input fields of the entry form.

Page.pubtypeMenu(pubtype, fieldFlag, citation_suffix)
> Line: ~2734
> Description:
  Returns HTML code containing a list of option selects for the different
  publication types.
> Params:
  pubtype - currently selected publication type 
  fieldFlag - flag identifying whether the field is a text field 
  citation_suffix - 

Page.changePubtypeOneCitation(citation_suffix, pubtype)
> Line: ~2920
> Description:
  Calls Page.enterChangingByPubtypeInfo() to set up the fields of the given
  publication type for the current citation. Ultimately changes the publication
  type of the current citation.
> Params:
  citation_suffix - suffix of current citation
  pubtype - publication type to change the citation to

Page.getInbookRelatedBooks_request(void)
> Line: ~2937
> Description:
  Sends an Ajax request searching for books with a similar title to the current
  book

Page.getInbookRelatedBooks_response(void)
> Line: ~2943
> Description:
  When it recieves an Ajax response, it sets the inbook_search_button_div to an
  option list of the citation that were similar to the current one.

Page.changePubtypeTabs(void)
> Line: ~2962
> Description:
  ...
**NOTE: There is literally nothing in this function.

Page.printCheckBox(group, value, checked, disabled)
> Line: ~2967
> Description:
  Returns HTML code containing a checkbox for the given group with the given
  value.
> Params:
  group - id name for the checkbox
  value - value for the checkbox
  checked - string that tells whether the checkbox should be checked
  disabled - string that tells whether the checkbox should be disabled

Page.getCheckedValue(radioObj)
> Line: ~2976
> Description:
  Used by saveEntry(), nextInputEntry(). Finds the radio button and check the
  value
> Params:
  radioObj - radio button object

Page.setCheckedValue(radioObj, newValue)
> Line: ~3015
> Description:
  Sets the given radio button object to the given value
**NOTE: The file says this function is currently not in use
> Params:
  radioObj - radio button
  newValue - value to check 

Page.checkAuthorFirstnameForInitials(void)
> Line: ~3032
> Description:
  Returns an array containing strings in the form 'authorifn' where i is a
  number. That string is the id of the firstname field.

Page.alertOnSavingFirstnameAsInitials(void)
> Line: ~3048
> Description:
  Returns a string saying that the current author's firstname contains initials
  and asks if the user still wants to save. It will return an empty string if
  the author's first name doesn't contain initials and false if the
  Page.checkAuthorFirstnameForInitials() returns a string with length <= 0

Page.checkInputAndSave(type, merge, timestamp)
> Line: ~3070
> Description:
  Checks the type of change/added content and saves it with the given timestamp.
  Then it merges the pre_merge_ids if specified. At the end it sends an Ajax
  request to services/citations.php to Page.onResponseCheckAuthors.
> Params:
  type - type of change or new information added
  merge - whether or not an id merge needs to take place
  timestamp - timestamp of event

Page.create_page_dot_sentData(timestamp)
> Line: ~3132
> Description:
  Creates a new array of data_keys for the page.
> Params:
  timestamp - timestamp string of the event

Page.validate_varified_entry(void)
> Line: ~3182
> Description:
  Goes through each author checkbox on the page and checks if it is checked. If
  they all are, it returns 1, otherwise it returns 0;

Page.update_page_dot_sentData(timestamp)
> Line: ~3204
> Description:
  Calls Page.alertOnSavingFirstnameAsInitials() and saves the response into a
  variable info. If info exists and is confirmed, it updates the Page's sentData
  of each verified author's to -1; unverified authors' sentData is set to -2.
  Then, regardless, it saves whether the each author's first name and last name
  are. 
**NOTE: timestamp is not used
> Params:
  timestamp - timestamp of event

Page.showHome(void)
> Line: ~3233
> Description:
  Used by homePage(). Shows elements that have the id 'welcome' or 'home' and
  hides 'top', 'options', 'insert', 'citations', and 'secondary'.

Page.buildXMLText(data_key, datavalue)
> Line: ~3247
> Description:
  Returns XML text that contains a citation object in XML format
> Param:
  data_key - 
  datavalue - 

Page.CompareSentDataWithReceivedData(void)
> Line: ~3258
> Description:
  Calls Page.compareTwoCitations() on the page's current citation and the
  citation in the page's sentData.

Page.compareTwoCitations(cit1, cit2)
> Line: ~3266
> Description:
  Checks for differences between the given citations and returns a string
  containing an HTML table of all the differences. Otherwise, it returns the
  empty string.

Page.right_column_display(current_view)
> Line: ~ 3315
> Description:
  Shows and hides various elements in the right column, based on the
  current view passed to the function. If it doesn't recognize the view, it sets
  the display to a default setting.
> Params:
  current_view - string that could be: 'all', 'none', 'export_citations'.

Page.print_ViewOptions_rm_div(void)
> Line: ~3357
> Description:
  Returns HTML code containing a div with the id 'view_options_rm'. This calls
  Page.printFormatMenu(), Page.printSortOrderMenu(), Page.showURLs(),
  Page.showNotes(), Page.showAbstracts(), Page.highlightMissingInfoCB(),
  Page.showCitationID(), and Page.setCompactView() to fill a table of options.

Page.print_ExportCitations_rm_div(void)
> Line: ~3378
> Description:
  Returns HTML code containing a div with the id 'export_citations_rm'. It
  contains a table with the contents returned by Page.printExportMenu().

Page.print_Collections_rm_div(void)
> Line: ~3390
> Description:
  Returns HTML code containing a div with the id 'collections_rm'. It contains a
  table with the contents returned by
  Page.printCollectionNamesMenuForManagingCitations().

Page.print_CompareMergeCitations_rm_div(void)
> Line: ~3406
> Description:
  Returns HTML code containing a div with the id 'compare_merge_citations_rm'.
  It contains a table with a button to call Page.compareCitations().
  

Page.panel1_alert_message(msg, panel1_open)
> Line: ~3417
> Description:
  Returns HTML code containing a div with the given alert message. 
> Params:
  msg - message to display in div
  panel1_open - whether or not to open panel1.

Page.createToolTips(void)
> Line: ~3426
> Description:
  Sets the page's tt (tooltip) variable to a new YAHOO.widget.Tooltip telling
  the user how to verify a citation. 
